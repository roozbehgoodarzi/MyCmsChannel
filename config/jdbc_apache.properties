#(String) The fully qualified Java class name of the JDBC driver to be used.
#The driver has to be accessible from the same classloader as tomcat-jdbc.jar
source.jdbc.driverClassName = com.ibm.db2.jcc.DB2Driver

source.jdbc.url= jdbc:db2://172.16.16.64:468/TSTDB

#(String) The connection username to be passed to our JDBC driver to establish a connection. Note,
#at this point, DataSource.getConnection(username,password) is not using the credentials passed into the method. 
source.jdbc.username = ngfstest

#(String) The connection password to be passed to our JDBC driver to establish a connection. Note,
#at this point, DataSource.getConnection(username,password) is not using the credentials passed into the method.
source.jdbc.password = bbbb


#(int) Connections that have been abandoned (timed out) won't get closed and
#reported up unless the numbers of connections in use are above the percentage
#defined by abandonWhenPercentageFull. The value should be between 0-100.
#The default value is 0, which implies that connections are eligible for
#closure as soon as removeAbandonedTimeout has been reached.
jdbc.abandonWhenPercentageFull = 0

#(String) The connection properties that will be sent to our JDBC driver
#when establishing new connections. Format of the string must be [propertyName=property;]
#* NOTE - The "user" and "password" properties will be passed explicitly,
# so they do not need to be included here. The default value is null.
jdbc.connectionProperties = resultSetHoldability=2;

#(boolean) The default auto-commit state of connections created by this pool.
#If not set, default is JDBC driver default (If not set then the setAutoCommit method will not be called.)
jdbc.defaultAutoCommit = true

# (boolean) The default read-only state of connections created by this pool.
#If not set then the setReadOnly method will not be called. (Some drivers don't support read only mode, ex: Informix)
jdbc.defaultReadOnly = true

#(String) The default catalog of connections created by this pool.
jdbc.defaultCatalog = ""

#  (String) The default TransactionIsolation state of connections created by this pool. One of the following: (see javadoc )
# * NONE
# * READ_COMMITTED
# * READ_UNCOMMITTED
# * REPEATABLE_READ
# * SERIALIZABLE
# If not set, the method will not be called and it defaults to the JDBC driver.
#    int TRANSACTION_READ_UNCOMMITTED = 1;
#    int TRANSACTION_READ_COMMITTED   = 2;
#    int TRANSACTION_REPEATABLE_READ  = 4;
#    int TRANSACTION_SERIALIZABLE     = 8;
jdbc.defaultTransactionIsolation = 1

#(boolean) Set to true if you wish that calls to getConnection should be treated
#fairly in a true FIFO fashion. This uses the org.apache.tomcat.jdbc.pool.FairBlockingQueue
#implementation for the list of the idle connections. The default value is true.
#This flag is required when you want to use asynchronous connection retrieval.
#Setting this flag ensures that threads receive connections in the order they arrive.
#During performance tests, there is a very large difference in how locks and lock waiting is implemented.
#When fairQueue=true> there is a decision making process based on what operating system the system is running.
#If the system is running on Linux (property os.name=Linux. To disable this Linux specific behavior and
#still use the fair queue, simply add the property org.apache.tomcat.jdbc.pool.FairBlockingQueue.ignoreOS=true
#to your system properties before the connection pool classes are loaded. 
jdbc.fairQueue = false

#(String) A semicolon separated list of classnames extending
#org.apache.tomcat.jdbc.pool.JdbcInterceptor class.
#These interceptors will be inserted as an interceptor into
#the chain of operations on a java.sql.Connection object. The default value is null.
# Predefined interceptors:
#   * org.apache.tomcat.jdbc.pool.interceptor.ConnectionState - keeps track of auto commit, read only, catalog and transaction isolation level.
#   * org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer - keeps track of opened statements, and closes them when the connection is returned to the pool.
#jdbc.jdbcInterceptors = org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer;org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReportJmx
jdbc.jdbcInterceptors = null

#(boolean) Register the pool with JMX or not.
#The default value is true.
jdbc.jmxEnabled = true

#(int)The initial number of connections that are
#created when the pool is started. Default value is 10
jdbc.initialSize = 5

#(String) A custom query to be run when a connection is first created.
#The default value is null.
jdbc.initSQL = SELECT 1 FROM SYSIBM.SYSDUMMY1 FOR FETCH ONLY

#(boolean) Flag to log stack traces for application code which abandoned a Connection.
#Logging of abandoned Connections adds overhead for every Connection borrow because
#a stack trace has to be generated. The default value is false.
jdbc.logAbandoned = false


#(int) The maximum number of active connections that can be allocated
#from this pool at the same time. The default value is 100
jdbc.maxActive = 200

#(long) Time in milliseconds to keep this connection. When a connection is returned to the pool,
#the pool will check to see if the now - time-when-connected > maxAge has been reached,
#and if so, it closes the connection rather than returning it to the pool.
#The default value is 0, which implies that connections will be left open and
#no age check will be done upon returning the connection to the pool.
jdbc.maxAge = 3600000

#(int) The maximum number of connections that should be kept in the pool at all times.
#Default value is maxActive:100 Idle connections are checked periodically (if enabled)
#and connections that been idle for longer than minEvictableIdleTimeMillis will be released. (also see testWhileIdle)
jdbc.maxIdle = 50
 
#(int) The minimum number of established connections that should be kept in the pool at all times.
#The connection pool can shrink below this number if validation queries fail.
#Default value is derived from initialSize:10 (also see testWhileIdle) 
jdbc.minIdle = 10

#(int) The maximum number of milliseconds that the pool will wait (when there are no available connections)
#for a connection to be returned before throwing an exception. Default value is 30000 (30 seconds)
jdbc.maxWait = 5000

#(boolean) The indication of whether objects will be validated before being borrowed from the pool.
#If the object fails to validate, it will be dropped from the pool, and we will attempt to borrow another.
#NOTE - for a true value to have any effect, the validationQuery parameter must be set to a non-null string.
#Default value is false In order to have a more efficient validation, see validationInterval Default value is false 
jdbc.testOnBorrow = true

#(boolean) The indication of whether objects will be validated before being returned to the pool.
#NOTE - for a true value to have any effect, the validationQuery parameter must be set to a non-null string. The default value is false. 
jdbc.testOnReturn = false
                                                    
#(boolean) The indication of whether objects will be validated by the idle object evictor (if any).
#If an object fails to validate, it will be dropped from the pool. NOTE - for a true value to have any effect,
#the validationQuery parameter must be set to a non-null string. The default value is false and this property
#has to be set in order for the pool cleaner/test thread is to run (also see timeBetweenEvictionRunsMillis) 
jdbc.testWhileIdle = true

#(int) The number of milliseconds to sleep between runs of the idle connection validation/cleaner thread.
#This value should not be set under 1 second. It dictates how often we check for idle, abandoned connections,
#and how often we validate idle connections. The default value is 5000 (5 seconds).
jdbc.timeBetweenEvictionRunsMillis = 10000

#(int) The minimum amount of time an object may sit idle in the pool
#before it is eligible for eviction. The default value is 60000 (60 seconds).
jdbc.minEvictableIdleTimeMillis = 60000


#(boolean) Flag to remove abandoned connections if they exceed the removeAbandonedTimout.
#If set to true a connection is considered abandoned and eligible for removal
#if it has been in use longer than the removeAbandonedTimeout Setting this to true
#can recover db connections from applications that fail to close a connection.
#See also logAbandoned The default value is false.
jdbc.removeAbandoned = true

#(int) Timeout in seconds before an abandoned (in use) connection can be removed.
#The default value is 60 (60 seconds). The value should be set to the
#longest running query your applications might have.
jdbc.removeAbandonedTimeout = 20

#(int) Timeout value in seconds. Default value is 0.
#Similar to to the removeAbandonedTimeout value but
#instead of treating the connection as abandoned, and
#potentially closing the connection, this simply logs the warning
#if logAbandoned is set to true. If this value is equal or less than 0,
#no suspect checking will be performed. Suspect checking only takes place
#if the timeout value is larger than 0 and the connection was not abandoned or
#if abandon check is disabled. If a connection is suspect a WARN message gets logged
#and a JMX notification gets sent once. 
jdbc.suspectTimeout = 20

#(boolean) Set to true if you wish the ProxyConnection class to use String.equals
#and set to false when you wish to use == when comparing method names.
#This property does not apply to added interceptors as those are configured individually.
#The default value is true.
jdbc.useEquals = true

#
jdbc.useLock = true

#(long) avoid excess validation, only run validation at most at this frequency - time in milliseconds.
#If a connection is due for validation, but has been validated previously within this interval,
#it will not be validated again. The default value is 30000 (30 seconds).
jdbc.validationInterval = 30000

#(String) The SQL query that will be used to validate connections from this pool
#before returning them to the caller. If specified, this query does not
#have to return any data, it just can't throw a SQLException.
#The default value is null. Example values are SELECT 1(mysql),
#select 1 from dual(oracle), SELECT 1(MS Sql Server) 
jdbc.validationQuery = SELECT 1 FROM SYSIBM.SYSDUMMY1 FOR FETCH ONLY
